/**	\file
	\ingroup Temperature
	\brief Declaration of functions, variables, and constants related to temperature sensors

	\addtogroup Temperature
	\brief Temperature sensors and measurements

	Temperature is measured using Pt1000 sensors and two ADS1248 analog to digital converters (ADC).
	Each of the ADCs can have up to 4 sensors attached and has therefore up to 4 channels.
	The sensors are in a 3-wire measurement circuit and an excitation current flows through the
	sensor and an identical current flows through a compensation resistor.
	The compensation is 1000 Ohms which results in a ADC value of 0 at the freezing point
	of water.
	The reference volate is generated by the sum of the two excitation currents that flows through
	a 2 kOhm resistor.
	Compensation and reference resistors are precision types with an accuracy of 0.05 %.
	The ADC resolution is 24 bit out of which 19-20 bits can be considered noise free.

	For this application only the most significant 16 of the ADC result are used because this already
	provides more than enough resolution.
	The Pt1000 resistors are rather linear but not completely.
	As the precision of these resistors is very good no assumption of linearity is made.
	Instead a lookup table is used to convert ADC values to temperature.
	This has the benefit over a direct calculation by being much faster and no less precise.

	To facilitate the usage of the temperature measuremens the interface hides the fact that
	two ADCs are used.
	Instead it works with 8 channels, the first 4 of which it associates with the channels of
	the first ADS1248 chip and the other 4 with the channels of the second chip.

	\{
*/
#ifndef __TEMPERATURE_H__
#define __TEMPERATURE_H__

#include <stdint.h>

/* *** Temperature constants ******************************************************************************************************************************* */

/* Start and ready ports and pins */
#define ADS1248_START_0_PORT	PORTB	///< Port output register of the micro controller for the start signal to the first ADS1248 ADC
#define ADS1248_START_0_DDR	DDRB	///< Data direction register of the micro controller for the start signal to the first ADS1248 ADC
#define ADS1248_START_0		PB4	///< Pin number of the micro controller for the start signal to the first ADS1248 ADC
#define ADS1248_START_1_PORT	PORTC	///< Port output register of the micro controller for the start signal to the second ADS1248 ADC
#define ADS1248_START_1_DDR	DDRC	///< Data direction register of the micro controller for the start signal to the second ADS1248 ADC
#define ADS1248_START_1		PC1	///< Pin number of the micro controller for the start signal to the second ADS1248 ADC
#define ADS1248_READY_0_DDR	DDRC	///< Data direction register of the micro controller for the ready signal from the first ADS1248 ADC
#define ADS1248_READY_0_PCINT	PCINT16	///< Pin change interrupt number of the micro controller for the ready signal from the first ADS1248 ADC
#define ADS1248_READY_0_PCIE	PCIE2	///< Pin change interrupt enable register of the micro controller for the ready signal from the first ADS1248 ADC
#define ADS1248_READY_0_PCMSK	PCMSK2	///< Pin change interrupt mask register of the micro controller for the ready signal from the first ADS1248 ADC
#define ADS1248_READY_0		PC0	///< Pin number of the micro controller for the ready signal from the first ADS1248 ADC
#define ADS1248_READY_1_DDR	DDRC	///< Data direction register of the micro controller for the ready signal from the second ADS1248 ADC
#define ADS1248_READY_1_PCINT	PCINT18 ///< Pin change interrupt number of the micro controller for the ready signal from the second ADS1248 ADC
#define ADS1248_READY_1_PCIE	PCIE2	///< Pin change interrupt enable register of the micro controller for the ready signal from the second ADS1248 ADC
#define ADS1248_READY_1_PCMSK	PCMSK2	///< Pin change interrupt mask register of the micro controller for the ready signal from the second ADS1248 ADC
#define ADS1248_READY_1		PC2	///< Pin number of the micro controller for the ready signal from the second ADS1248 ADC

#define TEMPERATURE_ADS1248_READY_FLAG	0x80	///< Flag used in the \ref _temperature_ADS1248_ready variable to indicate a completed ADC conversion

/* *** Temperature variables ******************************************************************************************************************************* */

#define TEMPERATURE_NUMBER_OF_SENSORS	1						///< Number of Pt1000 temperature sensors in the system
extern int16_t temperature_ADC [TEMPERATURE_NUMBER_OF_SENSORS];				///< ADC value of the last reading of each Pt1000 temperature sensor
#define TEMPERATURE_NUMBER_OF_ADS1248	2						///< Number of ADS1248 ADC chips in the system
extern uint8_t _temperature_ADS1248_ready [TEMPERATURE_NUMBER_OF_ADS1248];	///< Sensor number and ready flag for each ADS1248 ADC (interrupt set)

/* *** Temperature functions ******************************************************************************************************************************* */

int16_t temperature_to_ADS1248(int16_t temperature);	///< Function that converts temperature to ADC value using a lookup table and interpolation
int16_t temperature_ADS1248_to_temp(int16_t A);		///< Function that converts ADC value to temperature using a lookup table and interpolation

uint8_t temperature_string_to_temp(const char * string, int16_t * temperature);	///< Converts a string with a decimal number into an integer, multiplied by 100
void temperature_to_string(int16_t temperature, char * string);			///< Converts an integer to a decimal number in a string, divided by 100

void temperature_ADS1248_init(void);				///< Initializes all ADS1248 ADC chips through SPI
void temperature_ADS1248_start_conversion(uint8_t channel);	///< Configures the ADS1248 ADC and pulses the start signal
int8_t temperature_ADS1248_ready(void);				///< Checks whether a conversion from an ADS1248 ADC is completed and ready for readout
int16_t temperature_ADS1248_read_result(uint8_t channel);	///< Reads the (16 bit) result of an ADC conversion from an ADS1248 ADC

/** \} */

#endif /* __TEMPERATURE_H__ */
